#!/usr/bin/python
"""
    Script to report on disconnecting VPN clients
"""
import os
import sys
from argparse import ArgumentParser
import mozdef_client_config
sys.dont_write_bytecode = True
try:
    # 2.7's module:
    from ConfigParser import SafeConfigParser as ConfigParser
except ImportError:
    # 3's module:
    from configparser import ConfigParser


def log_to_mozdef(log_to_stdout, metrics):
    """
        Send the metrics we have, as a disconnect event, to mozdef
    """
    logger = mozdef_client_config.ConfigedMozDefEvent()
    # While 'Authorization' might seem more correct (we are layering
    # access upon a user after they have been authenticated), we are
    # asked to put all login-related info under the category of
    # 'Authentication'.  So, don't change this without an EIS consult.
    logger.category = 'Authentication'
    logger.source = 'openvpn'
    logger.tags = ['vpn', 'disconnect']

    logger.summary = ('SUCCESS: VPN disconnection for '
                      '{}'.format(metrics['common_name']))
    logger.details = {'sourceipaddress': metrics['client_public_ip'],
                      'sourceport': metrics['client_port'],
                      'vpnip': metrics['client_private_ip'],
                      'username': metrics['common_name'],
                      'connectionduration': metrics['time_duration'],
                      'bytessent': metrics['bytes_sent'],
                      'bytesreceived': metrics['bytes_received'],
                      'success': 'true'}
    logger.send()
    if log_to_stdout:
        print logger.syslog_convert()


def main():
    """
        Print the config that should go to each client into a file.
        Return True on success, False upon failure.
        Side effect is that we write to the output_filename.
    """
    parser = ArgumentParser(description='Args for client-disconnect')
    parser.add_argument('--conf', type=str, required=True,
                        help='Config file',
                        dest='conffile', default=None)
    args = parser.parse_args()

    if args.conffile is not None:
        # Reads slightly weird, this is intentional for parallelism
        # with other code, and maybe having multiple conf files.
        conf_file = [args.conffile]
        config = ConfigParser()
        for filename in conf_file:
            if os.path.isfile(filename):
                try:
                    config.read(filename)
                    break
                except:  # pylint: disable=bare-except
                    # This bare-except is due to 2.7
                    # limitations in configparser.
                    pass
        else:
            raise IOError('Config file not found')

        # We use mozdef to log about activities.  However, for triage,
        # it is in our interest to keep records, real-time, on the server.
        # mozdef can do syslog, but that is a separate file from the vpn's
        # activity log.  So, to put it all in one place, we can log to
        # stdout.
        if (config.has_section('client-disconnect') and
                config.has_option('client-disconnect', 'log_to_stdout')):
            log_to_stdout = config.getboolean('client-disconnect',
                                              'log_to_stdout')
        else:
            log_to_stdout = True

    # common_name is an environmental variable passed in:
    # "The X509 common name of an authenticated client."
    # https://openvpn.net/index.php/open-source/documentation/manuals/65-openvpn-20x-manpage.html
    usercn = os.environ.get('common_name')
    trusted_ip = os.environ.get('trusted_ip')

    if not usercn:
        # alternately, "The username provided by a connecting client."
        usercn = os.environ.get('username')

    # Super failure in openvpn, or hacking, or an improper test from a human.
    if not usercn:
        print('No common_name or username environment variable provided.')
        return False
    elif not trusted_ip:
        print('No trusted_ip environment variable provided.')
        return False

    mozdef_metrics = {
        # Bundle up the data we're going to report.  Safe the values
        # in case any are missing.
        'common_name': usercn,
        'client_public_ip': trusted_ip,
        'client_port': os.environ.get('trusted_port', ''),
        'client_private_ip': os.environ.get('ifconfig_pool_remote_ip', ''),
        # Reporting numbers
        'time_duration': os.environ.get('time_duration', ''),
        'bytes_sent': os.environ.get('bytes_sent', ''),
        'bytes_received': os.environ.get('bytes_received', ''),
    }

    log_to_mozdef(log_to_stdout, mozdef_metrics)
    return True


if __name__ == '__main__':
    if main():
        sys.exit(0)
    else:
        sys.exit(1)
